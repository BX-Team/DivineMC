From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: NONPLAYT <76615486+NONPLAYT@users.noreply.github.com>
Date: Mon, 3 Mar 2025 19:29:13 +0300
Subject: [PATCH] Async Chunk Sending


diff --git a/ca/spottedleaf/moonrise/patches/chunk_system/player/RegionizedPlayerChunkLoader.java b/ca/spottedleaf/moonrise/patches/chunk_system/player/RegionizedPlayerChunkLoader.java
index f81cc357618c70f2fcf0bc24b0b25be566ffffcc..287bc85b80059fe5711cec25220d2d7bab472a16 100644
--- a/ca/spottedleaf/moonrise/patches/chunk_system/player/RegionizedPlayerChunkLoader.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/player/RegionizedPlayerChunkLoader.java
@@ -823,8 +823,11 @@ public final class RegionizedPlayerChunkLoader {
             }
 
             // try to pull sending chunks
-            final long maxSends = Math.max(0L, Math.min(MAX_RATE, Integer.MAX_VALUE)); // note: no logic to track concurrent sends
-            final int maxSendsThisTick = Math.min((int)this.chunkSendLimiter.takeAllocation(time, sendRate, maxSends), this.sendQueue.size());
+            // DivineMC start - Async Chunk Sending
+            final int maxSendsThisTick = org.bxteam.divinemc.DivineConfig.asyncChunkSendingRateLimitChunkSends == -1
+                ? this.sendQueue.size()
+                : org.bxteam.divinemc.DivineConfig.asyncChunkSendingRateLimitChunkSends;
+            // DivineMC end - Async Chunk Sending
             // we do not return sends that we took from the allocation back because we want to limit the max send rate, not target it
             for (int i = 0; i < maxSendsThisTick; ++i) {
                 final long pendingSend = this.sendQueue.firstLong();
diff --git a/net/minecraft/server/network/PlayerChunkSender.java b/net/minecraft/server/network/PlayerChunkSender.java
index 14878690a88fd4de3e2c127086607e6c819c636c..4723ce85ebcd3740245607348a525f292ac1e2f3 100644
--- a/net/minecraft/server/network/PlayerChunkSender.java
+++ b/net/minecraft/server/network/PlayerChunkSender.java
@@ -80,16 +80,21 @@ public class PlayerChunkSender {
 
     // Paper start - Anti-Xray
     public static void sendChunk(ServerGamePacketListenerImpl packetListener, ServerLevel level, LevelChunk chunk) {
-        final boolean shouldModify = level.chunkPacketBlockController.shouldModify(packetListener.player, chunk);
-        packetListener.send(new ClientboundLevelChunkWithLightPacket(chunk, level.getLightEngine(), null, null, shouldModify));
-        // Paper end - Anti-Xray
-        // Paper start - PlayerChunkLoadEvent
-        if (io.papermc.paper.event.packet.PlayerChunkLoadEvent.getHandlerList().getRegisteredListeners().length > 0) {
-            new io.papermc.paper.event.packet.PlayerChunkLoadEvent(new org.bukkit.craftbukkit.CraftChunk(chunk), packetListener.getPlayer().getBukkitEntity()).callEvent();
-        }
-        // Paper end - PlayerChunkLoadEvent
-        ChunkPos pos = chunk.getPos();
-        DebugPackets.sendPoiPacketsForChunk(level, pos);
+        // DivineMC start - Async Chunk Sending
+        org.bxteam.divinemc.server.chunk.ChunkSendingExecutor.execute(() -> {
+            level.getChunk(chunk.getPos().x, chunk.getPos().z, net.minecraft.world.level.chunk.status.ChunkStatus.FULL); // DivineMC - ensure chunk is loaded
+            final boolean shouldModify = level.chunkPacketBlockController.shouldModify(packetListener.player, chunk);
+            packetListener.send(new ClientboundLevelChunkWithLightPacket(chunk, level.getLightEngine(), null, null, shouldModify));
+            // Paper end - Anti-Xray
+            // Paper start - PlayerChunkLoadEvent
+            if (io.papermc.paper.event.packet.PlayerChunkLoadEvent.getHandlerList().getRegisteredListeners().length > 0) {
+                new io.papermc.paper.event.packet.PlayerChunkLoadEvent(new org.bukkit.craftbukkit.CraftChunk(chunk), packetListener.getPlayer().getBukkitEntity()).callEvent();
+            }
+            // Paper end - PlayerChunkLoadEvent
+            ChunkPos pos = chunk.getPos();
+            DebugPackets.sendPoiPacketsForChunk(level, pos);
+        }, level);
+        // DivineMC end - Async Chunk Sending
     }
 
     private List<LevelChunk> collectChunksToSend(ChunkMap chunkMap, ChunkPos chunkPos) {
