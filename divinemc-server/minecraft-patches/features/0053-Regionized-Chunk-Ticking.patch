From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: NONPLAYT <76615486+NONPLAYT@users.noreply.github.com>
Date: Mon, 9 Jun 2025 13:51:43 +0300
Subject: [PATCH] Regionized Chunk Ticking
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This patch adds “regionized” parallel chunk ticking by grouping adjacent chunks into regions and processing each region on its own thread.

Original idea by Dueris, modified by NONPLAYT and dan28000

diff --git a/net/minecraft/server/level/ServerChunkCache.java b/net/minecraft/server/level/ServerChunkCache.java
index e08d1b25892098175c581bde4bfbdde58e3e7af2..33a2485363e5914f6a688dda5ab8f1658a8e46f9 100644
--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -57,6 +57,7 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
     private static final Logger LOGGER = LogUtils.getLogger();
     private final DistanceManager distanceManager;
     private final ServerLevel level;
+    public static final Executor REGION_EXECUTOR = java.util.concurrent.Executors.newFixedThreadPool(org.bxteam.divinemc.DivineConfig.regionizedChunkTickingExecutorThreadCount, new org.bxteam.divinemc.util.NamedAgnosticThreadFactory<>("region_ticking", ca.spottedleaf.moonrise.common.util.TickThread::new, org.bxteam.divinemc.DivineConfig.regionizedChunkTickingExecutorThreadPriority)); // DivineMC - Regionized Chunk Ticking
     public final Thread mainThread;
     final ThreadedLevelLightEngine lightEngine;
     public final ServerChunkCache.MainThreadExecutor mainThreadProcessor;
@@ -70,8 +71,10 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
     private final long[] lastChunkPos = new long[4];
     private final ChunkStatus[] lastChunkStatus = new ChunkStatus[4];
     private final ChunkAccess[] lastChunk = new ChunkAccess[4];
-    private final List<LevelChunk> spawningChunks = new ObjectArrayList<>();
-    private final Set<ChunkHolder> chunkHoldersToBroadcast = new ReferenceOpenHashSet<>();
+    // DivineMC start - Regionized Chunk Ticking
+    private final it.unimi.dsi.fastutil.objects.ObjectArrayList<LevelChunk> spawningChunks = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>();
+    private final Set<ChunkHolder> chunkHoldersToBroadcast = java.util.Collections.synchronizedSet(new ReferenceOpenHashSet<>());
+    // DivineMC end - Regionized Chunk Ticking
     @Nullable
     @VisibleForDebug
     private NaturalSpawner.SpawnState lastSpawnState;
@@ -153,6 +156,92 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
         return load ? this.syncLoad(chunkX, chunkZ, toStatus) : null;
     }
     // Paper end - rewrite chunk system
+
+    // DivineMC start - Regionized Chunk Ticking
+    private record RegionData(List<LevelChunk> chunks, List<Entity> entities) {
+        public boolean isEmpty() {
+            return chunks.isEmpty();
+        }
+    }
+
+    private static final int[] DX = {1, -1, 0, 0, 1, -1, -1, 1};
+    private static final int[] DZ = {0, 0, 1, -1, 1, 1, -1, -1};
+
+    private RegionData[] splitChunksIntoRegions(List<LevelChunk> chunks) {
+        if (chunks.isEmpty()) return new RegionData[0];
+
+        int size = chunks.size();
+        it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<LevelChunk> chunkSet = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>(chunks);
+
+        it.unimi.dsi.fastutil.objects.ObjectArrayList<RegionData> groups = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>(Math.max(1, level.players.size()));
+        LevelChunk[] stack = new LevelChunk[size];
+        it.unimi.dsi.fastutil.longs.Long2IntMap chunkToRegionMap = new it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap(size);
+
+        for (LevelChunk chunk : chunks) {
+            if (!chunkSet.contains(chunk)) continue;
+
+            it.unimi.dsi.fastutil.objects.ObjectArrayList<LevelChunk> group = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>(64);
+            stack[0] = chunk;
+            int stackPointer = 1;
+
+            while (stackPointer > 0) {
+                LevelChunk current = stack[--stackPointer];
+                group.add(current);
+
+                for (int i = 0; i < 8; i++) {
+                    LevelChunk neighbor = getChunk(current.locX + DX[i], current.locZ + DZ[i], false);
+                    if (neighbor != null && chunkSet.remove(neighbor)) {
+                        stack[stackPointer++] = neighbor;
+                    }
+                }
+            }
+
+            RegionData regionData = new RegionData(group, new it.unimi.dsi.fastutil.objects.ObjectArrayList<>());
+            groups.add(regionData);
+            int index = groups.indexOf(regionData);
+
+            for (LevelChunk regionChunk : group) {
+                chunkToRegionMap.put(regionChunk.coordinateKey, index);
+            }
+
+            if (chunkSet.isEmpty()) break;
+        }
+
+        level.entityTickList.entities.forEach(entity -> {
+            long chunkKey = entity.chunkPosition().longKey;
+
+            int index = chunkToRegionMap.get(chunkKey);
+            RegionData regionData = groups.get(index);
+            if (regionData != null) {
+                regionData.entities().add(entity);
+            } else {
+                tickEntity(entity);
+            }
+        });
+
+        return groups.toArray(new RegionData[0]);
+    }
+
+    private void tickEntity(Entity entity) {
+        if (!entity.isRemoved()) {
+            if (!level.tickRateManager().isEntityFrozen(entity)) {
+                entity.checkDespawn();
+                // Paper - rewrite chunk system
+                Entity vehicle = entity.getVehicle();
+                if (vehicle != null) {
+                    if (!vehicle.isRemoved() && vehicle.hasPassenger(entity)) {
+                        return;
+                    }
+
+                    entity.stopRiding();
+                }
+
+                level.guardEntityTick(level::tickNonPassenger, entity);
+            }
+        }
+    }
+    // DivineMC end - Regionized Chunk Ticking
+
     // Paper start - chunk tick iteration optimisations
     private final ca.spottedleaf.moonrise.common.util.SimpleThreadUnsafeRandom shuffleRandom = new ca.spottedleaf.moonrise.common.util.SimpleThreadUnsafeRandom(0L);
     private void iterateTickingChunksFaster() {
@@ -169,16 +258,68 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
         final LevelChunk[] raw = entityTickingChunks.getRawDataUnchecked();
         final int size = entityTickingChunks.size();
 
-        java.util.Objects.checkFromToIndex(0, size, raw.length);
-        for (int i = 0; i < size; ++i) {
-            world.tickChunk(raw[i], randomTickSpeed);
+        // DivineMC start - Regionized Chunk Ticking
+        if (org.bxteam.divinemc.DivineConfig.enableRegionizedChunkTicking) {
+            List<LevelChunk> chunks = new java.util.ArrayList<>(size);
+            for (int i = 0; i < size; ++i) {
+                chunks.add(raw[i]);
+            }
+
+            final RegionData[] regions = splitChunksIntoRegions(chunks);
+            int regionCount = regions.length;
+
+            java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(regionCount);
+
+            try {
+                java.util.concurrent.ForkJoinPool.managedBlock(new java.util.concurrent.ForkJoinPool.ManagedBlocker() {
+                    @Override
+                    public boolean block() throws InterruptedException {
+                        for (final RegionData region : regions) {
+                            if (region == null || region.isEmpty()) {
+                                latch.countDown();
+                                continue;
+                            }
+
+                            REGION_EXECUTOR.execute(() -> {
+                                try {
+                                    for (LevelChunk chunk : region.chunks()) {
+                                        world.tickChunk(chunk, randomTickSpeed);
+                                    }
+
+                                    for (Entity entity : region.entities()) {
+                                        tickEntity(entity);
+                                    }
+                                } finally {
+                                    latch.countDown();
+                                }
+                            });
+                        }
+
+                        latch.await();
+                        return true;
+                    }
 
-            // call mid-tick tasks for chunk system
-            if ((i & 7) == 0) {
-                ((ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftServer)this.level.getServer()).moonrise$executeMidTickTasks();
-                continue;
+                    @Override
+                    public boolean isReleasable() {
+                        return latch.getCount() == 0;
+                    }
+                });
+            } catch (InterruptedException ex) {
+                throw new RuntimeException("Interrupted managed block during region ticking", ex);
+            }
+        } else {
+            java.util.Objects.checkFromToIndex(0, size, raw.length);
+            for (int i = 0; i < size; ++i) {
+                world.tickChunk(raw[i], randomTickSpeed);
+
+                // call mid-tick tasks for chunk system
+                if ((i & 7) == 0) {
+                    ((ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftServer) this.level.getServer()).moonrise$executeMidTickTasks();
+                    continue;
+                }
             }
         }
+        // DivineMC end - Regionized Chunk Ticking
     }
     // Paper end - chunk tick iteration optimisations
 
diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index 1d4e6ffc1c17f2e5ab363b71a2e8cbcc63bdfb7c..c1a16c8fa52c605b179ba1d2065b011943f54972 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -189,7 +189,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
     private final LevelTicks<Block> blockTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded);
     private final LevelTicks<Fluid> fluidTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded);
     private final PathTypeCache pathTypesByPosCache = new PathTypeCache();
-    final Set<Mob> navigatingMobs = new ObjectOpenHashSet<>();
+    final Set<Mob> navigatingMobs = java.util.Collections.synchronizedSet(new ObjectOpenHashSet<>());
     volatile boolean isUpdatingNavigations;
     protected final Raids raids;
     private final ObjectLinkedOpenHashSet<BlockEventData> blockEvents = new ObjectLinkedOpenHashSet<>();
@@ -807,6 +807,12 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             }
 
             io.papermc.paper.entity.activation.ActivationRange.activateEntities(this); // Paper - EAR
+            // DivineMC start - Regionized Chunk Ticking
+            if (org.bxteam.divinemc.DivineConfig.enableRegionizedChunkTicking) {
+                this.tickBlockEntities();
+                return;
+            }
+            // DivineMC end - Regionized Chunk Ticking
             this.entityTickList
                 .forEach(
                     entity -> {
@@ -1794,22 +1800,16 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         if (Shapes.joinIsNotEmpty(collisionShape, collisionShape1, BooleanOp.NOT_SAME)) {
             List<PathNavigation> list = new ObjectArrayList<>();
 
-            try { // Paper - catch CME see below why
-            for (Mob mob : this.navigatingMobs) {
-                PathNavigation navigation = mob.getNavigation();
-                if (navigation.shouldRecomputePath(pos)) {
-                    list.add(navigation);
+            // DivineMC start - Regionized Chunk Ticking
+            synchronized (this.navigatingMobs) {
+                for (Mob mob : this.navigatingMobs) {
+                    PathNavigation navigation = mob.getNavigation();
+                    if (navigation.shouldRecomputePath(pos)) {
+                        list.add(navigation);
+                    }
                 }
             }
-            // Paper start - catch CME see below why
-            } catch (final java.util.ConcurrentModificationException concurrentModificationException) {
-                // This can happen because the pathfinder update below may trigger a chunk load, which in turn may cause more navigators to register
-                // In this case we just run the update again across all the iterators as the chunk will then be loaded
-                // As this is a relative edge case it is much faster than copying navigators (on either read or write)
-                this.sendBlockUpdated(pos, oldState, newState, flags);
-                return;
-            }
-            // Paper end - catch CME see below why
+            // DivineMC end - Regionized Chunk Ticking
 
             try {
                 this.isUpdatingNavigations = true;
diff --git a/net/minecraft/world/level/Level.java b/net/minecraft/world/level/Level.java
index fe6925c195fb7844e25d3055f18602a56901d87e..eac0c0d939cc5e6edc2a54f34ae3465152fee88b 100644
--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -106,7 +106,7 @@ public abstract class Level implements LevelAccessor, UUIDLookup<Entity>, AutoCl
     public static final int MIN_ENTITY_SPAWN_Y = -20000000;
     public final org.bxteam.divinemc.util.BlockEntityTickersList blockEntityTickers = new org.bxteam.divinemc.util.BlockEntityTickersList(); // Paper - public // DivineMC - optimize block entity removals - Fix MC-117075
     protected final NeighborUpdater neighborUpdater;
-    private final List<TickingBlockEntity> pendingBlockEntityTickers = Lists.newArrayList();
+    private final List<TickingBlockEntity> pendingBlockEntityTickers = java.util.Collections.synchronizedList(Lists.newArrayList()); // DivineMC - Regionized Chunk Ticking
     private boolean tickingBlockEntities;
     public final Thread thread;
     private final boolean isDebug;
@@ -138,7 +138,7 @@ public abstract class Level implements LevelAccessor, UUIDLookup<Entity>, AutoCl
 
     public boolean captureBlockStates = false;
     public boolean captureTreeGeneration = false;
-    public Map<BlockPos, org.bukkit.craftbukkit.block.CraftBlockState> capturedBlockStates = new java.util.LinkedHashMap<>(); // Paper
+    public Map<BlockPos, org.bukkit.craftbukkit.block.CraftBlockState> capturedBlockStates = java.util.Collections.synchronizedMap(new java.util.LinkedHashMap<>()); // Paper // DivineMC - Regionized Chunk Ticking
     public Map<BlockPos, BlockEntity> capturedTileEntities = new java.util.LinkedHashMap<>(); // Paper - Retain block place order when capturing blockstates
     @Nullable
     public List<net.minecraft.world.entity.item.ItemEntity> captureDrops;
diff --git a/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java b/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
index 028eae2f9a459b60e92f3344091083aa93b54485..51e5a54aff069cac14deef6c04899d3a469842ce 100644
--- a/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
+++ b/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
@@ -46,7 +46,7 @@ public class CollectingNeighborUpdater implements NeighborUpdater {
         this.addAndRun(pos, new CollectingNeighborUpdater.MultiNeighborUpdate(pos.immutable(), block, orientation, facing));
     }
 
-    private void addAndRun(BlockPos pos, CollectingNeighborUpdater.NeighborUpdates updates) {
+    private synchronized void addAndRun(BlockPos pos, CollectingNeighborUpdater.NeighborUpdates updates) { // DivineMC - Regionized Chunk Ticking - synchronized
         boolean flag = this.count > 0;
         boolean flag1 = this.maxChainedNeighborUpdates >= 0 && this.count >= this.maxChainedNeighborUpdates;
         this.count++;
@@ -65,7 +65,7 @@ public class CollectingNeighborUpdater implements NeighborUpdater {
         }
     }
 
-    private void runUpdates() {
+    private synchronized void runUpdates() { // DivineMC - Regionized Chunk Ticking - synchronized
         try {
             while (!this.stack.isEmpty() || !this.addedThisLayer.isEmpty()) {
                 for (int i = this.addedThisLayer.size() - 1; i >= 0; i--) {
